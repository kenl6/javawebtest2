<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <bean id="timerTask" class="cn.dw.utils.MyTimerTask" >
    	<property name="categoryService" ref="categoryService" />
    </bean>

	<!-- XML: 有两种: 合法XML(符合语法),有效的XML(在合法的基础上,进行xsd或者dtd的验证称为有效XML) -->
	<!-- 给连接池配置连接数据库四大参数 -->
	<bean id="ds" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl"
			value="jdbc:mysql://localhost:3306/web" />
		<property name="user" value="root" />
		<property name="password" value="123456" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="ds" />
		<property name="configLocation" value="classpath:mybatis.cfg.xml" />
	</bean>
	
	<!-- 根据接口与mapper文件动态生成实现类,此方式在在多个Dao接口时,会出现代码的冗余操作,可以采用类扫描进行批量注册
	<bean id="productDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="cn.dw.dao.ProductDao" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	-->
	<!-- 只需要制定接口所在的包路径即可 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <!-- cn.dw.dao里面的所有接口都会被扫描,然后关联相应 mapper.xml在运行时动态生成代理类,而且名称是类名小写 -->
	    <property name="basePackage" value="cn.dw.dao" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<bean id="productService" class="cn.dw.service.ProductServiceImpl">
		<property name="productDao" ref="productDao" />
	</bean>
	
	<bean id="categoryService" class="cn.dw.service.CategoryServiceImpl">
		<property name="categoryDao" ref="categoryDao" />
	</bean>

	<!-- 配置声明式事务: 基于AOP的实现,由于Spring高度封装提供的是模板,但是后面日志、异常还是需要AOP的概念 -->
	<!-- 配置事务管理器 -->
	<bean id="dt"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="ds" />
	</bean>

	<!-- spring对事务管理,提供了一个样板的风格,我们只需要配置模板即可 -->
	<!-- advice:就是在运行时候动态切入的代码:如果在核心代码之前,称为前置通知,核心代码之后则称为后置通知 -->
	<!-- 此处的通知其实就是事务,因此advice需要依赖事务管理器 -->
	<tx:advice id="ad" transaction-manager="dt">
		<tx:attributes>
			<!-- 配置哪些方法需要切入事务 -->
			<!-- save* + update* + delete* 方法都需要切入事务, REQUIRED:代表必须,如果没有事务则动态切入 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<!-- getByID, queryByName 犹豫查询不需要造成数据库的改变,因此查询是不需要事务 -->
			<tx:method name="*" propagation="NEVER" />
		</tx:attributes>
	</tx:advice>
	<!-- 上面仅仅是配置哪些方法需要切入事务,但是并没有告知事务运行时切入哪个层(Service Dao) -->
	<aop:config>
		<!-- pointcut:代表的是切面表达式语法 execution(* cn.dw.service.*.*(..)) * 代表此方法有无返回值都可 
			cn.dw.service: 代表要切入的包,一般都是存储service的包 cn.dw.service.*:代表当前包的所有类 cn.dw.service.*.*: 
			代表当前包的所有类的所有方法 (..): 有无参数都可以 -->
		<aop:pointcut
			expression="execution(* cn.dw.service.*.*(..))" id="pt" />
		<!-- tx + aop的配置,就是一个完整的声明式事务 -->
		<aop:advisor advice-ref="ad" pointcut-ref="pt" order="2" />
	</aop:config>

</beans>






























